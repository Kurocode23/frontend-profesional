{"version":3,"sources":["pictures-test.js"],"names":["beforeEach","t","srv","context","url","image","getImage","body","uri","publicId","json","deepEqual","options","method","description","src","userId","resolveWithFullResponse","response","is","statusCode","id","imageNew","JSON","parse","stringify","liked","likes"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;;;;;AAEA,cAAKA,UAAL;AAAA,+BAAgB,WAAMC,CAAN,EAAW;AACzB,QAAIC,MAAM,wCAAV;AACAD,MAAEE,OAAF,CAAUC,GAAV,GAAgB,MAAM,0BAAOF,GAAP,CAAtB;AACD,GAHD;;AAAA;AAAA;AAAA;AAAA;;AAKA,mBAAK,UAAL;AAAA,gCAAiB,WAAMD,CAAN,EAAW;AAC1B,QAAII,QAAQ,mBAASC,QAAT,EAAZ;AACA,QAAIF,MAAMH,EAAEE,OAAF,CAAUC,GAApB;;AAEA,QAAIG,OAAO,MAAM,8BAAQ,EAAEC,KAAM,GAAEJ,GAAI,IAAGC,MAAMI,QAAS,EAAhC,EAAmCC,MAAM,IAAzC,EAAR,CAAjB;AACAT,MAAEU,SAAF,CAAYJ,IAAZ,EAAkBF,KAAlB;AACD,GAND;;AAAA;AAAA;AAAA;AAAA;;AAQA,mBAAK,QAAL;AAAA,gCAAe,WAAMJ,CAAN,EAAW;AACxB,QAAII,QAAQ,mBAASC,QAAT,EAAZ;AACA,QAAIF,MAAMH,EAAEE,OAAF,CAAUC,GAApB;;AAEA,QAAIQ,UAAU;AACZC,cAAQ,MADI;AAEZL,WAAKJ,GAFO;AAGZM,YAAM,IAHM;AAIZH,YAAM;AACJO,qBAAaT,MAAMS,WADf;AAEJC,aAAKV,MAAMU,GAFP;AAGJC,gBAAQX,MAAMW;AAHV,OAJM;AASZC,+BAAyB;AATb,KAAd;;AAYA,QAAIC,WAAW,MAAM,8BAAQN,OAAR,CAArB;;AAEAX,MAAEkB,EAAF,CAAKD,SAASE,UAAd,EAA0B,GAA1B;AACAnB,MAAEU,SAAF,CAAYO,SAASX,IAArB,EAA2BF,KAA3B;AACD,GApBD;;AAAA;AAAA;AAAA;AAAA;;AAsBA,mBAAK,gBAAL;AAAA,gCAAuB,WAAMJ,CAAN,EAAW;AAChC,QAAII,QAAQ,mBAASC,QAAT,EAAZ;AACA,QAAIF,MAAMH,EAAEE,OAAF,CAAUC,GAApB;;AAEA,QAAIQ,UAAU;AACZC,cAAQ,MADI;AAEZL,WAAM,GAAEJ,GAAI,IAAGC,MAAMgB,EAAG,OAFZ;AAGZX,YAAM;AAHM,KAAd;;AAMA,QAAIH,OAAO,MAAM,8BAAQK,OAAR,CAAjB;;AAEA,QAAIU,WAAWC,KAAKC,KAAL,CAAWD,KAAKE,SAAL,CAAepB,KAAf,CAAX,CAAf;;AAEAiB,aAASI,KAAT,GAAiB,IAAjB;AACAJ,aAASK,KAAT,GAAiB,CAAjB;;AAEA1B,MAAEU,SAAF,CAAYJ,IAAZ,EAAkBe,QAAlB;AACD,GAlBD;;AAAA;AAAA;AAAA;AAAA","file":"pictures-test.js","sourcesContent":["import test from 'ava'\nimport micro from 'micro'\nimport listen from 'test-listen'\nimport request from 'request-promise'\n\nimport pictures from '../pictures'\nimport fixtures from './fixtures'\n\ntest.beforeEach(async t => {\n  let srv = micro(pictures)\n  t.context.url = await listen(srv)\n})\n\ntest('GET /:id', async t => {\n  let image = fixtures.getImage()\n  let url = t.context.url\n\n  let body = await request({ uri: `${url}/${image.publicId}`, json: true })\n  t.deepEqual(body, image)\n})\n\ntest('POST /', async t => {\n  let image = fixtures.getImage()\n  let url = t.context.url\n\n  let options = {\n    method: 'POST',\n    uri: url,\n    json: true,\n    body: {\n      description: image.description,\n      src: image.src,\n      userId: image.userId\n    },\n    resolveWithFullResponse: true\n  }\n\n  let response = await request(options)\n\n  t.is(response.statusCode, 201)\n  t.deepEqual(response.body, image)\n})\n\ntest('POST /:id/like', async t => {\n  let image = fixtures.getImage()\n  let url = t.context.url\n\n  let options = {\n    method: 'POST',\n    uri: `${url}/${image.id}/like`,\n    json: true\n  }\n\n  let body = await request(options)\n\n  let imageNew = JSON.parse(JSON.stringify(image))\n\n  imageNew.liked = true\n  imageNew.likes = 1\n\n  t.deepEqual(body, imageNew)\n})\n"]}